from typing import List, Tuple

class BaseModel:
    def __init__(self) -> None: ...
    def add_tag(self, arg0: str, arg1: int) -> None: ...
    @property
    def tags(self) -> json: ...
    @property
    def type(self) -> str: ...

class LegoBuilder:
    def __init__(self) -> None: ...
    def build_heightmap(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: int) -> None: ...
    def insert_model(self, arg0: Mesh) -> None: ...
    def lego_to_png(self, arg0: str) -> None: ...
    def legofy(self, arg0: int) -> json: ...

class Model(BaseModel):
    def __init__(self) -> None: ...
    def add_attribute(self, arg0: str, arg1: int) -> None: ...
    def copy(self) -> Model: ...
    def deserialize(self, arg0: json) -> None: ...
    def serialize(self) -> json: ...
    def shift(self, arg0: float, arg1: float, arg2: float) -> None: ...
    def to_obj(self, arg0: str, arg1: int) -> int: ...
    @property
    def bounding_box(self) -> Tuple[Tuple[float,float,float],Tuple[float,float,float]]: ...
    @property
    def centroid(self) -> Tuple[float,float,float]: ...
    @property
    def type(self) -> str: ...

class ModelLoader:
    def __init__(self) -> None: ...
    def transform(self) -> Model: ...
    @property
    def type(self) -> str: ...

class MultiLine(BaseModel):
    def __init__(self) -> None: ...
    def push_l2(self, arg0: List[float]) -> None: ...
    def push_l3(self, arg0: List[float]) -> None: ...
    def transform(self) -> Model: ...
    @property
    def type(self) -> str: ...

class MultiPoint(BaseModel):
    def __init__(self) -> None: ...
    def push_p2(self, arg0: List[float]) -> None: ...
    def push_p3(self, arg0: List[float]) -> None: ...
    def transform(self) -> Model: ...
    @property
    def type(self) -> str: ...

class MultiPolygon(BaseModel):
    def __init__(self) -> None: ...
    def push_p2(self, arg0: List[List[float]]) -> None: ...
    def push_p3(self, arg0: List[List[float]]) -> None: ...
    def transform(self) -> Model: ...
    @property
    def type(self) -> str: ...

class Points(Model):
    def __init__(self) -> None: ...
    def copy(self) -> Model: ...
    def to_obj(self, arg0: str, arg1: int) -> int: ...
    @property
    def type(self) -> str: ...

class Segments(Model):
    def __init__(self) -> None: ...
    def add_attribute(self, arg0: str, arg1: int) -> None: ...
    def copy(self) -> Model: ...
    def to_obj(self, arg0: str, arg1: int) -> int: ...
    @property
    def type(self) -> str: ...

class Mesh(Model):
    def __init__(self) -> None: ...
    def copy(self) -> Model: ...
    def to_obj(self, arg0: str, arg1: int) -> int: ...
    @property
    def type(self) -> str: ...
